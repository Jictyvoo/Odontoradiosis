import { Injectable } from '@angular/core';
import ImageEffects from './domain/controllers/imageEffects';
import MainController from './domain/controllers/mainController';
import SemiautomaticLandmarks from './domain/features/semiautomatic_landmark/init';
import aJson from './domain/features/semiautomatic_landmark/routines/a.ldmk.json';
import enaJson from './domain/features/semiautomatic_landmark/routines/ena.ldmk.json';
import gnatioJson from './domain/features/semiautomatic_landmark/routines/gnatio.ldmk.json';
import nasioJson from './domain/features/semiautomatic_landmark/routines/nasio.ldmk.json';
import selaJson from './domain/features/semiautomatic_landmark/routines/sela.ldmk.json';
import OdontoradiosisKeeper from './domain/models/odontoradiosisKeeper';
import ScaleManager from './domain/util/scaleManager';
import CanvasOdontoradiosisImpl from './infra/views/canvasImpl';
import * as i0 from "@angular/core";
export class CephalometricCanvasService {
    constructor(infoKeeper, scaleManager) {
        this.infoKeeper = infoKeeper;
        this.scaleManager = scaleManager;
        this.imageLoaded = false;
    }
    init(stackCanvas) {
        this.canvasOdontoradiosis = new CanvasOdontoradiosisImpl(stackCanvas, this.scaleManager, { image: 0, bezier: 1, landmarks: 2 });
        this.imageEffects = new ImageEffects(this.canvasOdontoradiosis);
        this.mainController = new MainController(this.canvasOdontoradiosis, this.scaleManager, this.infoKeeper);
    }
    /**
     * Adding the semiautomatic landmark indentification feature
     * @param tracingController
     * @param landmarksController
     * @returns
     */
    static newSemiautomaticLandmark(tracingController, landmarksController) {
        return new SemiautomaticLandmarks([aJson, enaJson, gnatioJson, nasioJson, selaJson], tracingController, landmarksController);
        // semiautomaticLandmarks.generateButtonEvent();
    }
    get effectsManager() {
        return this.imageEffects;
    }
    get defaultEffectValues() {
        return ImageEffects.defaultValues;
    }
    get tracingController() {
        return this.mainController.tracingController;
    }
    get cephalometricCanvas() {
        return this.mainController.canvasOdontoradiosis;
    }
    get controller() {
        return this.mainController;
    }
    get isImageOpened() {
        return this.imageLoaded;
    }
    openImage(imageData) {
        this.mainController.tracingController.setBezierPoints();
        const self = this;
        this.canvasOdontoradiosis.openImage(imageData, function () {
            self.mainController.loadJsonCurve('');
            self.mainController.loadJsonLandmarks('');
            self.imageLoaded = true;
        });
        this.imageEffects.reset();
    }
}
CephalometricCanvasService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: CephalometricCanvasService, deps: [{ token: OdontoradiosisKeeper }, { token: ScaleManager }], target: i0.ɵɵFactoryTarget.Injectable });
CephalometricCanvasService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: CephalometricCanvasService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: CephalometricCanvasService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: OdontoradiosisKeeper }, { type: ScaleManager }]; } });
//# sourceMappingURL=data:application/json;base64,