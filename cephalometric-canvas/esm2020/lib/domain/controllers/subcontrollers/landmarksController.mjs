import { LocalRepositoryImpl } from '../../../infra/repositories/localStorage.repository';
class LandmarksController {
    /**
     *
     * @param {ICanvasDraw} canvasOdontoradiosis
     */
    constructor(canvasOdontoradiosis) {
        this.landmarks = {};
        this.canvas = canvasOdontoradiosis;
        this.localRepository = new LocalRepositoryImpl();
    }
    /**
     * @returns {ILandmarkArray} this.landmarks
     */
    getLandmarks() {
        return this.landmarks;
    }
    /**
     * Lardmarks setter
     * @param {ILandmarkArray} newLandmarks
     */
    setLandmarks(newLandmarks) {
        this.landmarks = newLandmarks;
    }
    /**
     * Set a single landmark value
     * @param {string} name
     * @param {ILandmark} value
     */
    setLandmark(name, value = { x: 0, y: 0 }) {
        this.landmarks[name] = value;
    }
    /**
     * Verify if landmark exists. If not and toCreate is true, it'll create
     * @param {string} name
     * @param {boolean} toCreate
     * @returns {ILandmark}
     */
    verifyLandmark(name, toCreate = false) {
        if (!this.landmarks[name] && toCreate) {
            this.landmarks[name] = { x: 0, y: 0 };
        }
        return this.landmarks[name];
    }
    /**
     * Save all landmarks in a hidden form
     */
    saveLandmarks() {
        const data_json = JSON.stringify(this.landmarks);
        this.localRepository.set('saved_points', data_json);
    }
    /**
     * Draw a landmark with its name
     * @param {CanvasRenderingContext2D} canvasContext
     * @param {string} landmarkName
     */
    drawLandmark(canvasContext, landmarkName) {
        const locations = this.landmarks[landmarkName];
        const context = canvasContext;
        const readyToShowName = landmarkName.match(/\(.+\)/);
        if (readyToShowName) {
            this.canvas.drawCircleCtx('landmarks', locations.x, locations.y, this.canvas.scales.pointRadius, 1, LandmarksController.color.fill, LandmarksController.color.stroke);
            context.beginPath();
            context.fillStyle = LandmarksController.color.fill;
            context.font = this.canvas.scales.nameScale + 'px Arial';
            context.fillText(readyToShowName.toString(), Math.floor(locations.x - this.canvas.scales.textRelativePosition.x), Math.floor(locations.y + this.canvas.scales.textRelativePosition.y));
            context.fill();
            context.lineWidth = 1;
            context.strokeStyle = LandmarksController.color.stroke;
            context.stroke();
        }
    }
    /**
     * Redraw all landmarks
     */
    redrawLandmarks() {
        const landmarksCanvas = this.canvas.getCanvas('landmarks');
        const context = landmarksCanvas.getContext('2d');
        context.clearRect(0, 0, landmarksCanvas.width, landmarksCanvas.height);
        const self = this;
        Object.keys(this.landmarks).forEach(function (element, _index, _array) {
            self.drawLandmark.call(self, context, element);
        });
    }
}
LandmarksController.color = Object.freeze({ fill: 'red', stroke: '#330005' });
export default LandmarksController;
//# sourceMappingURL=data:application/json;base64,