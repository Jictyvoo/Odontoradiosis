class UsefulMethods {
    /**
     * Returns canvas style, based on parameters
     * @param {number} zIndex
     * @param {string} position
     * @param {number} left
     * @param {number} top
     */
    static canvasStyle(zIndex = 0, position = 'absolute', left = 0, top = 0) {
        return `position: ${position}; left: ${left}; top: ${top}; z-index: ${zIndex};`;
    }
    /**
     * Normalize name
     * @param {string} toNormalize
     * @returns {string}
     */
    static normalizeTracingName(toNormalize) {
        return toNormalize.replace(/ /g, '-').toLowerCase();
    }
    /**
     * Return scale to angle
     * @param {object} oldPosition
     * @param {object} currentPosition
     */
    static highLowAngle(oldPosition, currentPosition) {
        const maxX = Math.abs(oldPosition.x - currentPosition.x), maxY = Math.abs(oldPosition.y - currentPosition.y);
        if (Math.max(maxX, maxY) === maxX) {
            return oldPosition.x > currentPosition.x ? -1 : 1;
        }
        return oldPosition.y > currentPosition.y ? -1 : 1;
    }
    /**
     * Subtract the origin from points
     * @param {object} pointA
     * @param {object} pointB
     * @param {object} origin
     */
    static normalizeValues(pointA, pointB, origin) {
        const normalized = [
            { x: pointA.x, y: pointA.y },
            { x: pointB.x, y: pointB.y },
        ];
        normalized[0].x -= origin.x;
        normalized[0].y -= origin.y;
        normalized[1].x -= origin.x;
        normalized[1].y -= origin.y;
        return normalized;
    }
    /**
     * Calculate angle between two points
     * @param {object} pointA
     * @param {object} pointB
     */
    static calculateAngle(pointA, pointB) {
        const productModule = {
            first: Math.sqrt(Math.pow(pointA.x, 2) + Math.pow(pointA.y, 2)),
            second: Math.sqrt(Math.pow(pointB.x, 2) + Math.pow(pointB.y, 2)),
        };
        const scaleProduct = Math.abs(pointA.x * pointB.x + pointA.y * pointB.y);
        return Math.acos(scaleProduct / (productModule.first * productModule.second));
    }
}
export default UsefulMethods;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlZnVsTWV0aG9kcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NlcGhhbG9tZXRyaWMtY2FudmFzL3NyYy9saWIvZG9tYWluL3V0aWwvdXNlZnVsTWV0aG9kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLGFBQWE7SUFDZjs7Ozs7O09BTUc7SUFDSCxNQUFNLENBQUMsV0FBVyxDQUNkLFNBQWlCLENBQUMsRUFDbEIsV0FBbUIsVUFBVSxFQUM3QixPQUFlLENBQUMsRUFDaEIsTUFBYyxDQUFDO1FBRWYsT0FBTyxhQUFhLFFBQVEsV0FBVyxJQUFJLFVBQVUsR0FBRyxjQUFjLE1BQU0sR0FBRyxDQUFDO0lBQ3BGLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFdBQW1CO1FBQzNDLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsWUFBWSxDQUNmLFdBQWdDLEVBQ2hDLGVBQW9DO1FBRXBDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ3BELElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQy9CLE9BQU8sV0FBVyxDQUFDLENBQUMsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsT0FBTyxXQUFXLENBQUMsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLGVBQWUsQ0FDbEIsTUFBMkIsRUFDM0IsTUFBMkIsRUFDM0IsTUFBMkI7UUFFM0IsTUFBTSxVQUFVLEdBQUc7WUFDZixFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFO1lBQzVCLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUU7U0FDL0IsQ0FBQztRQUNGLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztRQUM1QixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFNUIsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQzVCLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU1QixPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxjQUFjLENBQ2pCLE1BQTJCLEVBQzNCLE1BQTJCO1FBRTNCLE1BQU0sYUFBYSxHQUFHO1lBQ2xCLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDL0QsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNuRSxDQUFDO1FBQ0YsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FDekIsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FDNUMsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FDWixZQUFZLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FDOUQsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQUVELGVBQWUsYUFBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVBvaW50QmlkaW1lbnNpb25hbCB9IGZyb20gJy4vaW50ZXJmYWNlcy9pbnRlcmZhY2VzJztcclxuXHJcbmNsYXNzIFVzZWZ1bE1ldGhvZHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGNhbnZhcyBzdHlsZSwgYmFzZWQgb24gcGFyYW1ldGVyc1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHpJbmRleFxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBvc2l0aW9uXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGVmdFxyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRvcFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2FudmFzU3R5bGUoXHJcbiAgICAgICAgekluZGV4OiBudW1iZXIgPSAwLFxyXG4gICAgICAgIHBvc2l0aW9uOiBzdHJpbmcgPSAnYWJzb2x1dGUnLFxyXG4gICAgICAgIGxlZnQ6IG51bWJlciA9IDAsXHJcbiAgICAgICAgdG9wOiBudW1iZXIgPSAwXHJcbiAgICApOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgcG9zaXRpb246ICR7cG9zaXRpb259OyBsZWZ0OiAke2xlZnR9OyB0b3A6ICR7dG9wfTsgei1pbmRleDogJHt6SW5kZXh9O2A7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBOb3JtYWxpemUgbmFtZVxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRvTm9ybWFsaXplXHJcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbm9ybWFsaXplVHJhY2luZ05hbWUodG9Ob3JtYWxpemU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRvTm9ybWFsaXplLnJlcGxhY2UoLyAvZywgJy0nKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJuIHNjYWxlIHRvIGFuZ2xlXHJcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2xkUG9zaXRpb25cclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjdXJyZW50UG9zaXRpb25cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGhpZ2hMb3dBbmdsZShcclxuICAgICAgICBvbGRQb3NpdGlvbjogSVBvaW50QmlkaW1lbnNpb25hbCxcclxuICAgICAgICBjdXJyZW50UG9zaXRpb246IElQb2ludEJpZGltZW5zaW9uYWxcclxuICAgICk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgbWF4WCA9IE1hdGguYWJzKG9sZFBvc2l0aW9uLnggLSBjdXJyZW50UG9zaXRpb24ueCksXHJcbiAgICAgICAgICAgIG1heFkgPSBNYXRoLmFicyhvbGRQb3NpdGlvbi55IC0gY3VycmVudFBvc2l0aW9uLnkpO1xyXG4gICAgICAgIGlmIChNYXRoLm1heChtYXhYLCBtYXhZKSA9PT0gbWF4WCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2xkUG9zaXRpb24ueCA+IGN1cnJlbnRQb3NpdGlvbi54ID8gLTEgOiAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2xkUG9zaXRpb24ueSA+IGN1cnJlbnRQb3NpdGlvbi55ID8gLTEgOiAxO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3VidHJhY3QgdGhlIG9yaWdpbiBmcm9tIHBvaW50c1xyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBvaW50QVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHBvaW50QlxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9yaWdpblxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbm9ybWFsaXplVmFsdWVzKFxyXG4gICAgICAgIHBvaW50QTogSVBvaW50QmlkaW1lbnNpb25hbCxcclxuICAgICAgICBwb2ludEI6IElQb2ludEJpZGltZW5zaW9uYWwsXHJcbiAgICAgICAgb3JpZ2luOiBJUG9pbnRCaWRpbWVuc2lvbmFsXHJcbiAgICApOiBJUG9pbnRCaWRpbWVuc2lvbmFsW10ge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSBbXHJcbiAgICAgICAgICAgIHsgeDogcG9pbnRBLngsIHk6IHBvaW50QS55IH0sXHJcbiAgICAgICAgICAgIHsgeDogcG9pbnRCLngsIHk6IHBvaW50Qi55IH0sXHJcbiAgICAgICAgXTtcclxuICAgICAgICBub3JtYWxpemVkWzBdLnggLT0gb3JpZ2luLng7XHJcbiAgICAgICAgbm9ybWFsaXplZFswXS55IC09IG9yaWdpbi55O1xyXG5cclxuICAgICAgICBub3JtYWxpemVkWzFdLnggLT0gb3JpZ2luLng7XHJcbiAgICAgICAgbm9ybWFsaXplZFsxXS55IC09IG9yaWdpbi55O1xyXG5cclxuICAgICAgICByZXR1cm4gbm9ybWFsaXplZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZSBhbmdsZSBiZXR3ZWVuIHR3byBwb2ludHNcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwb2ludEFcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwb2ludEJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGNhbGN1bGF0ZUFuZ2xlKFxyXG4gICAgICAgIHBvaW50QTogSVBvaW50QmlkaW1lbnNpb25hbCxcclxuICAgICAgICBwb2ludEI6IElQb2ludEJpZGltZW5zaW9uYWxcclxuICAgICk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgcHJvZHVjdE1vZHVsZSA9IHtcclxuICAgICAgICAgICAgZmlyc3Q6IE1hdGguc3FydChNYXRoLnBvdyhwb2ludEEueCwgMikgKyBNYXRoLnBvdyhwb2ludEEueSwgMikpLFxyXG4gICAgICAgICAgICBzZWNvbmQ6IE1hdGguc3FydChNYXRoLnBvdyhwb2ludEIueCwgMikgKyBNYXRoLnBvdyhwb2ludEIueSwgMikpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc2NhbGVQcm9kdWN0ID0gTWF0aC5hYnMoXHJcbiAgICAgICAgICAgIHBvaW50QS54ICogcG9pbnRCLnggKyBwb2ludEEueSAqIHBvaW50Qi55XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gTWF0aC5hY29zKFxyXG4gICAgICAgICAgICBzY2FsZVByb2R1Y3QgLyAocHJvZHVjdE1vZHVsZS5maXJzdCAqIHByb2R1Y3RNb2R1bGUuc2Vjb25kKVxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVzZWZ1bE1ldGhvZHM7XHJcbiJdfQ==