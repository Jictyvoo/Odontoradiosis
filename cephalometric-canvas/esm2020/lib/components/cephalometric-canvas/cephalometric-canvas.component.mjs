import { Component, ViewChild } from '@angular/core';
import OdontoradiosisKeeper from '../../domain/models/odontoradiosisKeeper';
import ScaleManager from '../../domain/util/scaleManager';
import UsefulMethods from '../../domain/util/usefulMethods';
import * as i0 from "@angular/core";
import * as i1 from "../../cephalometric-canvas.service";
export class CephalometricCanvasComponent {
    constructor(canvasService, infoKeeper, scaleManager) {
        this.canvasService = canvasService;
        this.infoKeeper = infoKeeper;
        this.scaleManager = scaleManager;
    }
    ngOnInit() { }
    ngAfterViewInit() {
        this.canvasService.init(this.stackCanvasElement.nativeElement);
        this.canvasService.cephalometricCanvas.addCanvasElement('image', this.canvasImageElement.nativeElement);
        this.canvasService.cephalometricCanvas.addCanvasElement('bezier', this.canvasBezierElement.nativeElement);
        this.canvasService.cephalometricCanvas.addCanvasElement('landmarks', this.canvasLandmarksElement.nativeElement);
    }
    onMouseMove(event) {
        event.preventDefault();
        event.stopPropagation(); // tell the browser we're handling this event
        const canvasController = this.canvasService.cephalometricCanvas;
        const tracingController = this.canvasService.tracingController;
        const bezierCanvas = canvasController.getCanvas('bezier');
        const context = canvasController.getContext('bezier');
        context.translate(bezierCanvas.width / 2, bezierCanvas.height / 2);
        if (this.infoKeeper.isMouseDown && this.infoKeeper.isCurveFunction) {
            /* do drag things */
            canvasController.canvasCursor = 'move';
            const curveName = UsefulMethods.normalizeTracingName(this.infoKeeper.selectedOptions.curve);
            const referenceCanvas = canvasController.getCanvas('landmarks');
            const referenceContext = canvasController.getContext('landmarks');
            const referenceRect = referenceCanvas.getBoundingClientRect();
            const currentPosition = {
                x: this.scaleManager.dynamicCanvasScale(event.clientX, true, referenceContext, referenceRect),
                y: this.scaleManager.dynamicCanvasScale(event.clientY, false, referenceContext, referenceRect),
            };
            if (this.infoKeeper.mousePosition.disabled) {
                this.infoKeeper.mousePosition.x = currentPosition.x;
                this.infoKeeper.mousePosition.y = currentPosition.y;
                this.infoKeeper.mousePosition.disabled = false;
            }
            else {
                const boxVertexInfo = this.infoKeeper.isOnBoxVertex;
                if (boxVertexInfo.isOn) {
                    /*still need to fix problem when rescale with top points*/
                    let scaleX = currentPosition.x / this.infoKeeper.mousePosition.x;
                    if (boxVertexInfo.index < 2) {
                        scaleX =
                            this.infoKeeper.mousePosition.x / currentPosition.x;
                    }
                    let scaleY = currentPosition.y / this.infoKeeper.mousePosition.y;
                    if (boxVertexInfo.index % 2 === 0) {
                        scaleY =
                            this.infoKeeper.mousePosition.y / currentPosition.y;
                    }
                    tracingController.rescaleBezier(curveName, scaleX, scaleY);
                }
                else if (this.infoKeeper.isOnCurvePoints != null) {
                    const curvePoints = this.infoKeeper
                        .isOnCurvePoints[0];
                    curvePoints[this.infoKeeper.isOnCurvePoints[1]] -=
                        this.infoKeeper.mousePosition.x - currentPosition.x;
                    curvePoints[this.infoKeeper.isOnCurvePoints[2]] -=
                        this.infoKeeper.mousePosition.y - currentPosition.y;
                }
                else if (this.infoKeeper.isInsideBox) {
                    tracingController.translateBezier(curveName, this.infoKeeper.mousePosition.x - currentPosition.x, this.infoKeeper.mousePosition.y - currentPosition.y);
                }
                else {
                    let angle = UsefulMethods.calculateAngle(currentPosition, this.infoKeeper.mousePosition);
                    if (!isNaN(angle)) {
                        angle *= UsefulMethods.highLowAngle(this.infoKeeper.mousePosition, {
                            x: currentPosition.x,
                            y: currentPosition.y,
                        });
                        tracingController.rotateBezier(curveName, angle);
                    }
                }
                this.infoKeeper.mousePosition.x = currentPosition.x;
                this.infoKeeper.mousePosition.y = currentPosition.y;
                this.infoKeeper.mousePosition.disabled = false;
                tracingController.drawAllCurves();
                tracingController.drawCurveBox(curveName, true);
                tracingController.drawPointCircle(curveName);
                tracingController.saveBezierCurve();
            }
        }
        else if (this.infoKeeper.isCurveFunction) {
            canvasController.canvasCursor = 'crosshair';
        }
    }
    /**
     * Receive a event and manage when to select curve or landmark functions
     * @param event
     */
    onMouseDown(event) {
        this.infoKeeper.isMouseDown = true;
        // Start handling the mouse position
        const currentCurve = this.infoKeeper.selectedOptions.curve;
        const curveName = UsefulMethods.normalizeTracingName(currentCurve);
        const tracingController = this.canvasService.tracingController;
        const canvasOdontoradiosis = this.canvasService.cephalometricCanvas;
        if (currentCurve.length <= 0 || currentCurve === 'Selecione') {
            this.infoKeeper.isCurveFunction = false;
            const landmarkName = this.infoKeeper.selectedOptions.landmark;
            this.canvasService.controller.markLandmarkPoint(landmarkName, {
                x: event.clientX,
                y: event.clientY,
            });
        }
        else if (tracingController.curveExists(curveName)) {
            this.infoKeeper.isCurveFunction = true;
            const points = tracingController.getBoxDimensions(curveName);
            const relativeMouse = this.scaleManager.getMousePos(canvasOdontoradiosis.getCanvas('bezier'), { x: event.clientX, y: event.clientY });
            this.infoKeeper.isInsideBox =
                relativeMouse.x >= points[0] &&
                    relativeMouse.x <= points[0] + points[2] &&
                    relativeMouse.y >= points[1] &&
                    relativeMouse.y <= points[1] + points[3];
            this.infoKeeper.isOnBoxVertex =
                tracingController.verifyMouseOnBoxVertex(relativeMouse, curveName);
            this.infoKeeper.isOnCurvePoints =
                tracingController.verifyMouseOnCurvePoint(relativeMouse, curveName);
        }
    }
    onMouseUp() {
        this.infoKeeper.isMouseDown = false;
        this.infoKeeper.isInsideBox = false;
        this.infoKeeper.isOnBoxVertex = { isOn: false, index: 0 };
        this.infoKeeper.isOnCurvePoints = null;
        /*this.infoKeeper.mousePosition.x = null;
        this.infoKeeper.mousePosition.y = null;*/
        this.infoKeeper.mousePosition.disabled = true;
    }
}
CephalometricCanvasComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: CephalometricCanvasComponent, deps: [{ token: i1.CephalometricCanvasService }, { token: OdontoradiosisKeeper }, { token: ScaleManager }], target: i0.ɵɵFactoryTarget.Component });
CephalometricCanvasComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.0.0", type: CephalometricCanvasComponent, selector: "lib-cephalometric-canvas", viewQueries: [{ propertyName: "stackCanvasElement", first: true, predicate: ["stackCanvas"], descendants: true }, { propertyName: "canvasImageElement", first: true, predicate: ["canvasImage"], descendants: true }, { propertyName: "canvasBezierElement", first: true, predicate: ["canvasBezier"], descendants: true }, { propertyName: "canvasLandmarksElement", first: true, predicate: ["canvasLandmarks"], descendants: true }], ngImport: i0, template: "<div id=\"card-canvas\" class=\"card-body\">\r\n  <div\r\n    (pointerdown)=\"onMouseDown($event)\"\r\n    (pointerup)=\"onMouseUp()\"\r\n    (pointermove)=\"onMouseMove($event)\"\r\n    #stackCanvas\r\n    id=\"stack-canvas\"\r\n  >\r\n    <canvas #canvasImage id=\"image\"> </canvas>\r\n    <canvas #canvasBezier id=\"bezier\"> </canvas>\r\n    <canvas #canvasLandmarks id=\"landmarks\"> </canvas>\r\n  </div>\r\n</div>\r\n", styles: ["#stack-canvas{position:relative;cursor:crosshair}#stack-canvas>canvas{max-width:100%;height:auto;position:absolute;left:0;top:0}#stack-canvas>canvas .image{z-index:0}#stack-canvas>canvas .bezier{z-index:1}#stack-canvas>canvas .landmarks{z-index:2}.card-body{max-width:100%;min-height:20rem;min-width:20rem}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.0", ngImport: i0, type: CephalometricCanvasComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-cephalometric-canvas', template: "<div id=\"card-canvas\" class=\"card-body\">\r\n  <div\r\n    (pointerdown)=\"onMouseDown($event)\"\r\n    (pointerup)=\"onMouseUp()\"\r\n    (pointermove)=\"onMouseMove($event)\"\r\n    #stackCanvas\r\n    id=\"stack-canvas\"\r\n  >\r\n    <canvas #canvasImage id=\"image\"> </canvas>\r\n    <canvas #canvasBezier id=\"bezier\"> </canvas>\r\n    <canvas #canvasLandmarks id=\"landmarks\"> </canvas>\r\n  </div>\r\n</div>\r\n", styles: ["#stack-canvas{position:relative;cursor:crosshair}#stack-canvas>canvas{max-width:100%;height:auto;position:absolute;left:0;top:0}#stack-canvas>canvas .image{z-index:0}#stack-canvas>canvas .bezier{z-index:1}#stack-canvas>canvas .landmarks{z-index:2}.card-body{max-width:100%;min-height:20rem;min-width:20rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.CephalometricCanvasService }, { type: OdontoradiosisKeeper }, { type: ScaleManager }]; }, propDecorators: { stackCanvasElement: [{
                type: ViewChild,
                args: ['stackCanvas']
            }], canvasImageElement: [{
                type: ViewChild,
                args: ['canvasImage']
            }], canvasBezierElement: [{
                type: ViewChild,
                args: ['canvasBezier']
            }], canvasLandmarksElement: [{
                type: ViewChild,
                args: ['canvasLandmarks']
            }] } });
//# sourceMappingURL=data:application/json;base64,