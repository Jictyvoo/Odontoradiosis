{"version":3,"file":"cephalometric-canvas.mjs","sources":["../../../projects/cephalometric-canvas/src/lib/domain/models/odontoradiosisKeeper.ts","../../../projects/cephalometric-canvas/src/lib/domain/util/scaleManager.ts","../../../projects/cephalometric-canvas/src/lib/domain/util/usefulMethods.ts","../../../projects/cephalometric-canvas/src/lib/domain/controllers/imageEffects.ts","../../../projects/cephalometric-canvas/src/lib/infra/repositories/localStorage.repository.ts","../../../projects/cephalometric-canvas/src/lib/domain/controllers/subcontrollers/landmarksController.ts","../../../projects/cephalometric-canvas/src/lib/infra/views/anatomicalTracing.ts","../../../projects/cephalometric-canvas/src/lib/domain/controllers/subcontrollers/tracingController.ts","../../../projects/cephalometric-canvas/src/lib/domain/controllers/mainController.ts","../../../projects/cephalometric-canvas/src/lib/domain/features/semiautomatic_landmark/init.ts","../../../projects/cephalometric-canvas/src/lib/infra/views/canvasImpl.ts","../../../projects/cephalometric-canvas/src/lib/cephalometric-canvas.service.ts","../../../projects/cephalometric-canvas/src/lib/components/cephalometric-canvas/cephalometric-canvas.component.ts","../../../projects/cephalometric-canvas/src/lib/components/cephalometric-canvas/cephalometric-canvas.component.html","../../../projects/cephalometric-canvas/src/lib/cephalometric-canvas.module.ts","../../../projects/cephalometric-canvas/src/public-api.ts","../../../projects/cephalometric-canvas/src/cephalometric-canvas.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n    ICurvePointLocation,\r\n    IMousePosition,\r\n} from '../util/interfaces/interfaces';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nclass OdontoradiosisKeeper {\r\n    public isMouseDown: boolean;\r\n    public isInsideBox: boolean;\r\n    public isOnBoxVertex: { isOn: boolean; index: number };\r\n    public isOnCurvePoints: ICurvePointLocation | null;\r\n    public mousePosition: IMousePosition;\r\n    public isCurveFunction: boolean;\r\n    public selectedOptions: { curve: string; landmark: string };\r\n\r\n    constructor() {\r\n        this.isMouseDown = false;\r\n        this.isInsideBox = false;\r\n        this.isOnBoxVertex = { isOn: false, index: 0 };\r\n        this.isOnCurvePoints = null;\r\n        this.mousePosition = { x: 0, y: 0, disabled: true };\r\n        this.isCurveFunction = false;\r\n        this.selectedOptions = { curve: '', landmark: '' };\r\n    }\r\n}\r\n\r\nexport default OdontoradiosisKeeper;\r\n","import { Injectable } from '@angular/core';\r\nimport { IPointBidimensional } from './interfaces/interfaces';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nclass ScaleManager {\r\n    public pointRadius: number;\r\n    public lineWidth: number;\r\n    public nameScale: number;\r\n    public textRelativePosition: { x: number; y: number };\r\n    public scaleDrawValue: {\r\n        pointRadius: number;\r\n        nameScale: number;\r\n        lineWidth: number;\r\n        textRelativePosition: { x: number; y: number };\r\n    };\r\n\r\n    constructor() {\r\n        this.pointRadius = 4;\r\n        this.lineWidth = 1;\r\n        this.nameScale = 10;\r\n        this.textRelativePosition = { x: 15, y: 15 };\r\n        this.scaleDrawValue = Object.freeze({\r\n            pointRadius: 4,\r\n            nameScale: 10,\r\n            lineWidth: 2,\r\n            textRelativePosition: Object.freeze({ x: 15, y: 15 }),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Calculate the scale to make canvas dynamic and returns it\r\n     * @param {number} valueToResize\r\n     * @param {boolean} isX\r\n     * @param {CanvasRenderingContext2D} clientRect\r\n     * @param {ClientRect} clientRect\r\n     */\r\n    dynamicCanvasScale(\r\n        valueToResize: number = 1,\r\n        isX: boolean = false,\r\n        context: CanvasRenderingContext2D,\r\n        clientRect: ClientRect\r\n    ): number {\r\n        const canvasDimensions = {\r\n            width: clientRect.width,\r\n            height: clientRect.height,\r\n        };\r\n        const imageDimensions = {\r\n            width: context.canvas.width,\r\n            height: context.canvas.height,\r\n        };\r\n        if (isX) {\r\n            return (\r\n                (imageDimensions.width * valueToResize) / canvasDimensions.width\r\n            );\r\n        } else {\r\n            return (\r\n                (imageDimensions.height * valueToResize) /\r\n                canvasDimensions.height\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates all scales variables\r\n     * @param {HTMLCanvasElement} canvas\r\n     */\r\n    calculateScales(canvas: HTMLCanvasElement): void {\r\n        const rect = canvas.getBoundingClientRect();\r\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        const imageDimensions = {\r\n            width: context.canvas.width,\r\n            height: context.canvas.height,\r\n        };\r\n        const isX = imageDimensions.width > imageDimensions.height;\r\n        this.pointRadius = this.dynamicCanvasScale(\r\n            this.scaleDrawValue.pointRadius,\r\n            isX,\r\n            context,\r\n            rect\r\n        );\r\n        this.nameScale = this.dynamicCanvasScale(\r\n            this.scaleDrawValue.nameScale,\r\n            isX,\r\n            context,\r\n            rect\r\n        );\r\n        this.lineWidth = this.dynamicCanvasScale(\r\n            this.scaleDrawValue.lineWidth,\r\n            isX,\r\n            context,\r\n            rect\r\n        );\r\n        this.textRelativePosition.x = this.dynamicCanvasScale(\r\n            this.scaleDrawValue.textRelativePosition.x,\r\n            isX,\r\n            context,\r\n            rect\r\n        );\r\n        this.textRelativePosition.y = this.dynamicCanvasScale(\r\n            this.scaleDrawValue.textRelativePosition.y,\r\n            isX,\r\n            context,\r\n            rect\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an object containing the relative mouse position in Canvas\r\n     * @param {HTMLElement} canvas\r\n     * @param {Event} point\r\n     */\r\n    getMousePos(\r\n        canvas: HTMLCanvasElement,\r\n        point: IPointBidimensional\r\n    ): { x: number; y: number } {\r\n        const rect = canvas.getBoundingClientRect();\r\n        const context = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n        return {\r\n            x: this.dynamicCanvasScale(\r\n                point.x - rect.left,\r\n                true,\r\n                context,\r\n                rect\r\n            ),\r\n            y: this.dynamicCanvasScale(\r\n                point.y - rect.top,\r\n                false,\r\n                context,\r\n                rect\r\n            ),\r\n        };\r\n    }\r\n}\r\n\r\nexport default ScaleManager;\r\n","import { IPointBidimensional } from './interfaces/interfaces';\r\n\r\nclass UsefulMethods {\r\n    /**\r\n     * Returns canvas style, based on parameters\r\n     * @param {number} zIndex\r\n     * @param {string} position\r\n     * @param {number} left\r\n     * @param {number} top\r\n     */\r\n    static canvasStyle(\r\n        zIndex: number = 0,\r\n        position: string = 'absolute',\r\n        left: number = 0,\r\n        top: number = 0\r\n    ): string {\r\n        return `position: ${position}; left: ${left}; top: ${top}; z-index: ${zIndex};`;\r\n    }\r\n\r\n    /**\r\n     * Normalize name\r\n     * @param {string} toNormalize\r\n     * @returns {string}\r\n     */\r\n    static normalizeTracingName(toNormalize: string): string {\r\n        return toNormalize.replace(/ /g, '-').toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * Return scale to angle\r\n     * @param {object} oldPosition\r\n     * @param {object} currentPosition\r\n     */\r\n    static highLowAngle(\r\n        oldPosition: IPointBidimensional,\r\n        currentPosition: IPointBidimensional\r\n    ): number {\r\n        const maxX = Math.abs(oldPosition.x - currentPosition.x),\r\n            maxY = Math.abs(oldPosition.y - currentPosition.y);\r\n        if (Math.max(maxX, maxY) === maxX) {\r\n            return oldPosition.x > currentPosition.x ? -1 : 1;\r\n        }\r\n        return oldPosition.y > currentPosition.y ? -1 : 1;\r\n    }\r\n\r\n    /**\r\n     * Subtract the origin from points\r\n     * @param {object} pointA\r\n     * @param {object} pointB\r\n     * @param {object} origin\r\n     */\r\n    static normalizeValues(\r\n        pointA: IPointBidimensional,\r\n        pointB: IPointBidimensional,\r\n        origin: IPointBidimensional\r\n    ): IPointBidimensional[] {\r\n        const normalized = [\r\n            { x: pointA.x, y: pointA.y },\r\n            { x: pointB.x, y: pointB.y },\r\n        ];\r\n        normalized[0].x -= origin.x;\r\n        normalized[0].y -= origin.y;\r\n\r\n        normalized[1].x -= origin.x;\r\n        normalized[1].y -= origin.y;\r\n\r\n        return normalized;\r\n    }\r\n\r\n    /**\r\n     * Calculate angle between two points\r\n     * @param {object} pointA\r\n     * @param {object} pointB\r\n     */\r\n    static calculateAngle(\r\n        pointA: IPointBidimensional,\r\n        pointB: IPointBidimensional\r\n    ): number {\r\n        const productModule = {\r\n            first: Math.sqrt(Math.pow(pointA.x, 2) + Math.pow(pointA.y, 2)),\r\n            second: Math.sqrt(Math.pow(pointB.x, 2) + Math.pow(pointB.y, 2)),\r\n        };\r\n        const scaleProduct = Math.abs(\r\n            pointA.x * pointB.x + pointA.y * pointB.y\r\n        );\r\n        return Math.acos(\r\n            scaleProduct / (productModule.first * productModule.second)\r\n        );\r\n    }\r\n}\r\n\r\nexport default UsefulMethods;\r\n","import { IEffectValues } from '../util/interfaces/interfaces';\r\nimport { ICanvasDraw } from '../util/interfaces/views/canvasDraw';\r\n\r\nexport const defaultValues: IEffectValues = Object.freeze({\r\n    brightness: 100,\r\n    contrast: 100,\r\n    grayscale: 0,\r\n    invert: 0,\r\n});\r\n\r\nclass ImageEffects {\r\n    public brightness: number;\r\n    public contrast: number;\r\n    public grayscale: number;\r\n    public invert: number;\r\n    public canvasManager: ICanvasDraw;\r\n\r\n    /**\r\n     *\r\n     * @param {ICanvasDraw} canvas\r\n     */\r\n    constructor(canvas: ICanvasDraw) {\r\n        this.brightness = defaultValues.brightness;\r\n        this.contrast = defaultValues.contrast;\r\n        this.grayscale = defaultValues.grayscale;\r\n        this.invert = defaultValues.invert;\r\n        this.canvasManager = canvas;\r\n    }\r\n\r\n    public static get defaultValues(): IEffectValues {\r\n        return defaultValues;\r\n    }\r\n\r\n    /**\r\n     * Returns css style values\r\n     * @returns {string}\r\n     */\r\n    getValues(): string {\r\n        const filterStyle = `brightness(${this.brightness}%) contrast(${this.contrast}%) grayscale(${this.grayscale}%) invert(${this.invert}%)`;\r\n        return filterStyle;\r\n    }\r\n\r\n    /**\r\n     * Event function that apply read and apply effects on image\r\n     */\r\n    updateFilterValues(): void {\r\n        const filterValue = this.getValues();\r\n        this.canvasManager.setStyle('image', 'filter', filterValue);\r\n    }\r\n\r\n    /**\r\n     * Reset all effects\r\n     */\r\n    reset(): void {\r\n        this.brightness = 100;\r\n        this.contrast = 100;\r\n        this.grayscale = 0;\r\n        this.invert = 0;\r\n        this.updateFilterValues();\r\n    }\r\n}\r\n\r\nexport default ImageEffects;\r\n","import { Injectable } from '@angular/core';\r\nimport { ILocalRepository } from '../../domain/util/interfaces/repositories';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class LocalRepositoryImpl implements ILocalRepository {\r\n    private readonly storage: Storage;\r\n\r\n    constructor() {\r\n        this.storage = window.localStorage;\r\n    }\r\n\r\n    public get<T>(key: string): T | null {\r\n        const value = this.storage.getItem(key);\r\n        if (value === null) {\r\n            return null;\r\n        }\r\n        return JSON.parse(value);\r\n    }\r\n\r\n    public set<T>(key: string, value: T): void {\r\n        this.storage.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    public remove(key: string): void {\r\n        this.storage.removeItem(key);\r\n    }\r\n}\r\n","import { LocalRepositoryImpl } from '../../../infra/repositories/localStorage.repository';\r\nimport { ILandmark, ILandmarkArray } from '../../util/interfaces/interfaces';\r\nimport { ILocalRepository } from '../../util/interfaces/repositories';\r\nimport { ICanvasDraw } from '../../util/interfaces/views/canvasDraw';\r\n\r\nclass LandmarksController {\r\n    public landmarks: ILandmarkArray;\r\n    public canvas: ICanvasDraw;\r\n    private localRepository: ILocalRepository;\r\n    private static color = Object.freeze({ fill: 'red', stroke: '#330005' });\r\n\r\n    /**\r\n     *\r\n     * @param {ICanvasDraw} canvasOdontoradiosis\r\n     */\r\n    constructor(canvasOdontoradiosis: ICanvasDraw) {\r\n        this.landmarks = {};\r\n        this.canvas = canvasOdontoradiosis;\r\n        this.localRepository = new LocalRepositoryImpl();\r\n    }\r\n\r\n    /**\r\n     * @returns {ILandmarkArray} this.landmarks\r\n     */\r\n    getLandmarks(): ILandmarkArray {\r\n        return this.landmarks;\r\n    }\r\n\r\n    /**\r\n     * Lardmarks setter\r\n     * @param {ILandmarkArray} newLandmarks\r\n     */\r\n    setLandmarks(newLandmarks: ILandmarkArray): void {\r\n        this.landmarks = newLandmarks;\r\n    }\r\n\r\n    /**\r\n     * Set a single landmark value\r\n     * @param {string} name\r\n     * @param {ILandmark} value\r\n     */\r\n    setLandmark(name: string, value: ILandmark = { x: 0, y: 0 }): void {\r\n        this.landmarks[name] = value;\r\n    }\r\n\r\n    /**\r\n     * Verify if landmark exists. If not and toCreate is true, it'll create\r\n     * @param {string} name\r\n     * @param {boolean} toCreate\r\n     * @returns {ILandmark}\r\n     */\r\n    verifyLandmark(name: string, toCreate: boolean = false): ILandmark {\r\n        if (!this.landmarks[name] && toCreate) {\r\n            this.landmarks[name] = { x: 0, y: 0 };\r\n        }\r\n        return this.landmarks[name];\r\n    }\r\n\r\n    /**\r\n     * Save all landmarks in a hidden form\r\n     */\r\n    saveLandmarks(): void {\r\n        const data_json = JSON.stringify(this.landmarks);\r\n        this.localRepository.set('saved_points', data_json);\r\n    }\r\n\r\n    /**\r\n     * Draw a landmark with its name\r\n     * @param {CanvasRenderingContext2D} canvasContext\r\n     * @param {string} landmarkName\r\n     */\r\n    drawLandmark(\r\n        canvasContext: CanvasRenderingContext2D,\r\n        landmarkName: string\r\n    ): void {\r\n        const locations = this.landmarks[landmarkName];\r\n        const context = canvasContext;\r\n        const readyToShowName = landmarkName.match(/\\(.+\\)/);\r\n        if (readyToShowName) {\r\n            this.canvas.drawCircleCtx(\r\n                'landmarks',\r\n                locations.x,\r\n                locations.y,\r\n                this.canvas.scales.pointRadius,\r\n                1,\r\n                LandmarksController.color.fill,\r\n                LandmarksController.color.stroke\r\n            );\r\n            context.beginPath();\r\n            context.fillStyle = LandmarksController.color.fill;\r\n            context.font = this.canvas.scales.nameScale + 'px Arial';\r\n            context.fillText(\r\n                readyToShowName.toString(),\r\n                Math.floor(\r\n                    locations.x - this.canvas.scales.textRelativePosition.x\r\n                ),\r\n                Math.floor(\r\n                    locations.y + this.canvas.scales.textRelativePosition.y\r\n                )\r\n            );\r\n            context.fill();\r\n            context.lineWidth = 1;\r\n            context.strokeStyle = LandmarksController.color.stroke;\r\n            context.stroke();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Redraw all landmarks\r\n     */\r\n    redrawLandmarks(): void {\r\n        const landmarksCanvas = this.canvas.getCanvas('landmarks');\r\n        const context = landmarksCanvas.getContext(\r\n            '2d'\r\n        ) as CanvasRenderingContext2D;\r\n        context.clearRect(0, 0, landmarksCanvas.width, landmarksCanvas.height);\r\n        const self = this;\r\n        Object.keys(this.landmarks).forEach(function (element, _index, _array) {\r\n            self.drawLandmark.call(self, context, element);\r\n        });\r\n    }\r\n}\r\n\r\nexport default LandmarksController;\r\n","import { IBezierCurves } from '../../domain/util/interfaces/interfaces';\r\nimport { ICanvasDraw } from '../../domain/util/interfaces/views/canvasDraw';\r\nimport { ITracingDraw } from '../../domain/util/interfaces/views/tracingDraw';\r\n\r\nclass AnatomicalTracingImpl implements ITracingDraw {\r\n    public canvas: ICanvasDraw;\r\n    public allCurves: IBezierCurves;\r\n    private static color = Object.freeze({ fill: 'green', stroke: '#00e379' });\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {ICanvasDraw} canvas\r\n     */\r\n    constructor(canvas: ICanvasDraw) {\r\n        this.canvas = canvas;\r\n        this.allCurves = {};\r\n    }\r\n\r\n    /**\r\n     * Bezier curves setter\r\n     * @param {IBezierCurves} curves\r\n     */\r\n    setAllCurves(curves: IBezierCurves): void {\r\n        this.allCurves = curves;\r\n    }\r\n\r\n    private drawCurve(curvePoints: number[][]): void {\r\n        for (let position = 0; position < curvePoints.length; position += 1) {\r\n            const points = curvePoints[position];\r\n            if (position === 0) {\r\n                this.canvas.drawBezier(\r\n                    this.canvas.getContext('bezier'),\r\n                    points[0],\r\n                    points[1],\r\n                    points[2],\r\n                    points[3],\r\n                    points[4],\r\n                    points[5],\r\n                    points[6],\r\n                    points[7],\r\n                    AnatomicalTracingImpl.color.stroke\r\n                );\r\n            } else {\r\n                const temporary = curvePoints[position - 1];\r\n                this.canvas.drawBezier(\r\n                    this.canvas.getContext('bezier'),\r\n                    temporary[temporary.length - 2],\r\n                    temporary[temporary.length - 1],\r\n                    points[0],\r\n                    points[1],\r\n                    points[2],\r\n                    points[3],\r\n                    points[4],\r\n                    points[5],\r\n                    AnatomicalTracingImpl.color.stroke\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw all curves\r\n     */\r\n    drawAllCurves(): void {\r\n        this.canvas.clearCanvas('bezier');\r\n        for (const entry of Object.entries(this.allCurves)) {\r\n            const element = entry[1];\r\n            this.drawCurve(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw all control points in a given curve\r\n     * @param {string} curveName\r\n     */\r\n    drawPointCircle(curveName: string): void {\r\n        if (this.allCurves[curveName] != null) {\r\n            const context = this.canvas.getContext('bezier');\r\n            //context.beginPath();\r\n            for (\r\n                let index = 0;\r\n                index < this.allCurves[curveName].length;\r\n                index++\r\n            ) {\r\n                const element = this.allCurves[curveName][index];\r\n                for (\r\n                    let subindex = 1;\r\n                    subindex < element.length;\r\n                    subindex += 2\r\n                ) {\r\n                    this.canvas.drawCircle(\r\n                        context,\r\n                        element[subindex - 1],\r\n                        element[subindex]\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {CanvasRenderingContext2D} context\r\n     * @param {array} boxDimensions\r\n     */\r\n    drawBoxVertex(\r\n        context: CanvasRenderingContext2D,\r\n        boxDimensions: number[]\r\n    ): void {\r\n        const selfCanvas = this.canvas;\r\n        [\r\n            [boxDimensions[0], boxDimensions[1]],\r\n            [boxDimensions[0], boxDimensions[1] + boxDimensions[3]],\r\n            [boxDimensions[0] + boxDimensions[2], boxDimensions[1]],\r\n            [\r\n                boxDimensions[0] + boxDimensions[2],\r\n                boxDimensions[1] + boxDimensions[3],\r\n            ],\r\n        ].forEach(function (\r\n            element: number[],\r\n            _index: number,\r\n            _array: number[][]\r\n        ) {\r\n            selfCanvas.drawCircle.call(\r\n                selfCanvas,\r\n                context,\r\n                element[0],\r\n                element[1]\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} currentCurve\r\n     * @param {array} boxDimensions\r\n     */\r\n    drawCurveBox(currentCurve: string, boxDimensions: number[]): void {\r\n        if (currentCurve != null) {\r\n            const context = this.canvas.getContext('bezier');\r\n            context.beginPath();\r\n            context.lineWidth = this.canvas.scales.lineWidth;\r\n            context.rect(\r\n                boxDimensions[0],\r\n                boxDimensions[1],\r\n                boxDimensions[2],\r\n                boxDimensions[3]\r\n            );\r\n            context.stroke();\r\n            this.drawBoxVertex(context, boxDimensions);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AnatomicalTracingImpl;\r\n","import { LocalRepositoryImpl } from '../../../infra/repositories/localStorage.repository';\r\nimport { default as AnatomicalTracingImpl } from '../../../infra/views/anatomicalTracing';\r\nimport deafultBezierCurves from '../../models/bezier_curves.json';\r\nimport {\r\n    IBezierCurves,\r\n    ICurvePointLocation,\r\n    IPointBidimensional,\r\n} from '../../util/interfaces/interfaces';\r\nimport { ILocalRepository } from '../../util/interfaces/repositories';\r\nimport { ICanvasDraw } from '../../util/interfaces/views/canvasDraw';\r\nimport { ITracingDraw } from '../../util/interfaces/views/tracingDraw';\r\n\r\nclass TracingController {\r\n    public canvasOdontoradiosis: ICanvasDraw;\r\n    public anatomicalTracing: ITracingDraw;\r\n    public bezierPoints: IBezierCurves;\r\n    public currentBoxPoints: number[];\r\n    private localRepository: ILocalRepository;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {ICanvasDraw} canvasOdontoradiosis\r\n     */\r\n    constructor(canvasOdontoradiosis: ICanvasDraw) {\r\n        this.canvasOdontoradiosis = canvasOdontoradiosis;\r\n\r\n        // Create AnatomicalTracing and set this curvePoints\r\n        this.anatomicalTracing = new AnatomicalTracingImpl(\r\n            canvasOdontoradiosis\r\n        );\r\n        this.anatomicalTracing.setAllCurves(deafultBezierCurves);\r\n\r\n        this.bezierPoints = deafultBezierCurves;\r\n        this.currentBoxPoints = [0, 0, 0, 0];\r\n        this.localRepository = new LocalRepositoryImpl();\r\n    }\r\n\r\n    /**\r\n     * Bezier points setter\r\n     * @param {IBezierCurves} points\r\n     */\r\n    setBezierPoints(points: IBezierCurves = deafultBezierCurves): void {\r\n        this.bezierPoints = points;\r\n        this.anatomicalTracing.setAllCurves(points);\r\n    }\r\n\r\n    /**\r\n     * Verify if curve exists\r\n     * @param {string} curveId\r\n     * @returns {boolean}\r\n     */\r\n    curveExists(curveId: string = ''): boolean {\r\n        const allCurves = Object.keys(this.bezierPoints);\r\n        return allCurves.includes(curveId);\r\n    }\r\n\r\n    /**\r\n     * Verify if curve exists and returns it or null\r\n     * @param {string} curveId\r\n     */\r\n    getCurve(curveId: string = ''): number[][] | null {\r\n        if (this.curveExists(curveId)) {\r\n            return this.bezierPoints[curveId];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Save all bezier curves in a hidden form\r\n     */\r\n    saveBezierCurve() {\r\n        const curvesJson = JSON.stringify(this.bezierPoints);\r\n        this.localRepository.set('bezier_curves', curvesJson);\r\n    }\r\n\r\n    /**\r\n     * Returns all points in a curve box\r\n     * @param {string} curveName\r\n     * @param {boolean} recalculate\r\n     */\r\n    getBoxPoints(curveName: string, recalculate: boolean) {\r\n        if (this.currentBoxPoints != null && !recalculate) {\r\n            return this.currentBoxPoints;\r\n        }\r\n        let minX = Number.POSITIVE_INFINITY,\r\n            minY = Number.POSITIVE_INFINITY;\r\n        let maxX = Number.NEGATIVE_INFINITY,\r\n            maxY = Number.NEGATIVE_INFINITY;\r\n        for (let element of this.bezierPoints[curveName]) {\r\n            for (let position = 0; position < element.length; position++) {\r\n                const point = element[position];\r\n                if (position % 2 !== 0) {\r\n                    minY = Math.min(minY, point);\r\n                    maxY = Math.max(maxY, point);\r\n                } else {\r\n                    minX = Math.min(minX, point);\r\n                    maxX = Math.max(maxX, point);\r\n                }\r\n            }\r\n        }\r\n        this.currentBoxPoints = [minX, minY, maxX, maxY];\r\n        return this.currentBoxPoints;\r\n    }\r\n\r\n    /**\r\n     * Returns an array with box dimensions of a specific curve\r\n     * @param {string} curveName\r\n     * @param {number} borderSize\r\n     * @param {boolean} recalculate\r\n     */\r\n    getBoxDimensions(\r\n        curveName: string,\r\n        borderSize: number = 20,\r\n        recalculate: boolean = false\r\n    ): number[] {\r\n        const points = this.getBoxPoints(curveName, recalculate);\r\n        const minPoint: IPointBidimensional = {\r\n            x: points[0],\r\n            y: points[1],\r\n        };\r\n        const maxPoint: IPointBidimensional = {\r\n            x: points[2],\r\n            y: points[3],\r\n        };\r\n\r\n        const width = maxPoint.x - minPoint.x,\r\n            height = maxPoint.y - minPoint.y;\r\n        return [\r\n            minPoint.x - borderSize,\r\n            minPoint.y - borderSize,\r\n            width + borderSize * 2,\r\n            height + borderSize * 2,\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Call AnatomicalTracing method to draw bezierCurves\r\n     */\r\n    drawAllCurves(): void {\r\n        this.anatomicalTracing.drawAllCurves();\r\n        this.saveBezierCurve();\r\n    }\r\n\r\n    /**\r\n     * Draw Curve box\r\n     * @param {string} currentCurve\r\n     * @param {boolean} recalculate\r\n     */\r\n    drawCurveBox(currentCurve: string, recalculate: boolean): void {\r\n        this.anatomicalTracing.drawCurveBox(\r\n            currentCurve,\r\n            this.getBoxDimensions(currentCurve, 20, recalculate)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Draw all control points in a given curve\r\n     * @param {string} curveName\r\n     */\r\n    drawPointCircle(curveName: string): void {\r\n        this.anatomicalTracing.drawPointCircle(curveName);\r\n    }\r\n\r\n    /**\r\n     * Returns a object containing a boolean if is on a boxVertex, and it index\r\n     * @param {*} relativeMouse\r\n     * @param {string} curveName\r\n     * @returns {object} { isOn: isOn, index: vertexIndex }\r\n     */\r\n    verifyMouseOnBoxVertex(\r\n        relativeMouse: IPointBidimensional,\r\n        curveName: string\r\n    ): { isOn: boolean; index: number } {\r\n        const boxVertex = this.getBoxDimensions(curveName, 20, true);\r\n        let isOn = false;\r\n        let vertexIndex = 0;\r\n        const pointRadius = this.canvasOdontoradiosis.scales.pointRadius;\r\n        [\r\n            [boxVertex[0], boxVertex[1]],\r\n            [boxVertex[0], boxVertex[1] + boxVertex[3]],\r\n            [boxVertex[0] + boxVertex[2], boxVertex[1]],\r\n            [boxVertex[0] + boxVertex[2], boxVertex[1] + boxVertex[3]],\r\n        ].forEach(function (element, index, _array) {\r\n            if (\r\n                relativeMouse.x >= element[0] - pointRadius &&\r\n                relativeMouse.x <= element[0] + pointRadius &&\r\n                relativeMouse.y >= element[1] - pointRadius &&\r\n                relativeMouse.y <= element[1] + pointRadius\r\n            ) {\r\n                isOn = true;\r\n                vertexIndex = index;\r\n            }\r\n        });\r\n        return { isOn: isOn, index: vertexIndex };\r\n    }\r\n\r\n    /**\r\n     * Returns the current position of the mouse if it is on a curve point\r\n     * @param {IPointBidimensional} relativeMouse\r\n     * @param {string} curveName\r\n     * @returns {array} [element, subindex, subindex + 1]\r\n     */\r\n    verifyMouseOnCurvePoint(\r\n        relativeMouse: IPointBidimensional,\r\n        curveName: string\r\n    ): ICurvePointLocation | null {\r\n        const pointRadius = this.canvasOdontoradiosis.scales.pointRadius;\r\n        for (\r\n            let index = 0;\r\n            index < this.bezierPoints[curveName].length;\r\n            index++\r\n        ) {\r\n            const element = this.bezierPoints[curveName][index];\r\n            for (let subindex = 0; subindex < element.length; subindex += 2) {\r\n                if (\r\n                    relativeMouse.x >= element[subindex] - pointRadius &&\r\n                    relativeMouse.x <= element[subindex] + pointRadius &&\r\n                    relativeMouse.y >= element[subindex + 1] - pointRadius &&\r\n                    relativeMouse.y <= element[subindex + 1] + pointRadius\r\n                ) {\r\n                    return [element, subindex, subindex + 1];\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Iterate all curves and changes it value\r\n     * @param {string} curveName\r\n     * @param {function} callback_1\r\n     * @param {funtion} callback_2\r\n     * @param {boolean} _recalculate\r\n     */\r\n    runPointsAndChange(\r\n        curveName: string,\r\n        callback_1: any,\r\n        callback_2: any,\r\n        _recalculate: boolean = false\r\n    ): void {\r\n        if (this.bezierPoints[curveName] != null) {\r\n            for (let points of this.bezierPoints[curveName]) {\r\n                for (let position = 0; position < points.length; position++) {\r\n                    if (position % 2 === 0) {\r\n                        points[position] = callback_1(\r\n                            points[position],\r\n                            points[position + 1]\r\n                        );\r\n                    } else {\r\n                        points[position] = callback_2(\r\n                            points[position],\r\n                            points[position - 1]\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            //this.anatomicalTracing.setAllCurves(this.bezierPoints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Translate a curve\r\n     * @param {string} curveName\r\n     * @param {float} amountX\r\n     * @param {float} amountY\r\n     */\r\n    translateBezier(curveName: string, amountX: number, amountY: number): void {\r\n        this.currentBoxPoints[0] -= amountX;\r\n        this.currentBoxPoints[1] -= amountY;\r\n        this.currentBoxPoints[2] -= amountX;\r\n        this.currentBoxPoints[3] -= amountY;\r\n        this.runPointsAndChange(\r\n            curveName,\r\n            function (pointX: number) {\r\n                return pointX - amountX;\r\n            },\r\n            function (pointY: number) {\r\n                return pointY - amountY;\r\n            },\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Rotate a bezier curve\r\n     * @param {string} curveName\r\n     * @param {float} angle\r\n     */\r\n    rotateBezier(curveName: string, angle: number): void {\r\n        this.runPointsAndChange(\r\n            curveName,\r\n            function (pointX: number, pointY: number) {\r\n                return pointX * Math.cos(angle) - pointY * Math.sin(angle);\r\n            },\r\n            function (pointY: number, pointX: number) {\r\n                return pointX * Math.sin(angle) + pointY * Math.cos(angle);\r\n            },\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Reescale all bezier curves, based on scales given\r\n     * @param {string} curveName\r\n     * @param {float} scaleX\r\n     * @param {float} scaleY\r\n     */\r\n    rescaleBezier(curveName: string, scaleX: number, scaleY: number): void {\r\n        this.runPointsAndChange(\r\n            curveName,\r\n            function (pointX: number) {\r\n                return pointX * scaleX;\r\n            },\r\n            function (pointY: number) {\r\n                return pointY * scaleY;\r\n            },\r\n            true\r\n        );\r\n    }\r\n}\r\n\r\nexport default TracingController;\r\n","import { default as OdontoradiosisKepper } from '../models/odontoradiosisKeeper';\r\nimport {\r\n    ILandmarkArray,\r\n    IPointBidimensional,\r\n    IStringMap,\r\n} from '../util/interfaces/interfaces';\r\nimport { ICanvasDraw } from '../util/interfaces/views/canvasDraw';\r\nimport { default as ScaleManager } from '../util/scaleManager';\r\nimport { default as LandmarksController } from './subcontrollers/landmarksController';\r\nimport { default as TracingController } from './subcontrollers/tracingController';\r\n\r\nclass MainController {\r\n    public canvasOdontoradiosis: ICanvasDraw;\r\n    public scaleManager: ScaleManager;\r\n    public tracingController: TracingController;\r\n    public landmarksController: LandmarksController;\r\n    public infoKeeper: OdontoradiosisKepper;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {ICanvasDraw} canvasOdontoradiosis\r\n     * @param {ScaleManager} scaleManager\r\n     * @param {OdontoradiosisKepper} infoKeeper\r\n     */\r\n    constructor(\r\n        canvasOdontoradiosis: ICanvasDraw,\r\n        scaleManager: ScaleManager,\r\n        infoKeeper: OdontoradiosisKepper\r\n    ) {\r\n        this.canvasOdontoradiosis = canvasOdontoradiosis;\r\n        this.scaleManager = scaleManager;\r\n        this.tracingController = new TracingController(canvasOdontoradiosis);\r\n        this.landmarksController = new LandmarksController(\r\n            canvasOdontoradiosis\r\n        );\r\n        this.infoKeeper = infoKeeper;\r\n    }\r\n\r\n    /**\r\n     * Loads json file with landmarks location\r\n     * @param {int} id image id\r\n     */\r\n    public loadJsonLandmarks(jsonContent: string): void {\r\n        if (jsonContent.length > 0) {\r\n            const decodedLandmarks = JSON.parse(jsonContent);\r\n\r\n            const validLandmarks: ILandmarkArray = {};\r\n            for (const landmark of Object.entries(decodedLandmarks)) {\r\n                const landmarkName = landmark[0];\r\n                const landmarkPosition = landmark[1];\r\n\r\n                if (typeof landmarkPosition == 'object') {\r\n                    validLandmarks[landmarkName] = {\r\n                        x: (landmarkPosition as any)?.x,\r\n                        y: (landmarkPosition as any)?.y,\r\n                    };\r\n                }\r\n            }\r\n            this.landmarksController.setLandmarks(validLandmarks);\r\n            this.landmarksController.redrawLandmarks();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads json file with bezier anatomical tracing points\r\n     * @param {string} jsonContent image id\r\n     */\r\n    public loadJsonCurve(jsonContent: string): void {\r\n        // Load JsonCurves from default json file\r\n        this.tracingController.setBezierPoints();\r\n        if (jsonContent.length > 0) {\r\n            // Load from uploaded json file\r\n            // TODO: implement\r\n            this.tracingController.setBezierPoints(JSON.parse(jsonContent));\r\n        }\r\n        this.tracingController.drawAllCurves();\r\n    }\r\n\r\n    /**\r\n     * Adapt reference landmarks\r\n     */\r\n    referenceLandmarks(): void {\r\n        const currentLandmark = this.infoKeeper.selectedOptions.landmark;\r\n        const imagePaths: IStringMap = {};\r\n        imagePaths['Sela (S)'] = 'selaTurcica.png';\r\n        imagePaths['Násio (N)'] = 'nasio.png';\r\n        imagePaths['Espinha nasal anterior (ENA)'] = 'ENA.png';\r\n        imagePaths['Espinha nasal posterior (ENP)'] = 'ENP.png';\r\n        imagePaths['Ponto subespinhal (A)'] = 'A.png';\r\n        imagePaths['Ponto pupramental (B)'] = 'B.png';\r\n        imagePaths['Pogônio (Pog)'] = 'pogonio.png';\r\n        imagePaths['Gnátio (Gn)'] = 'Gnatio.png';\r\n        imagePaths['Mento (Me)'] = 'mento.png';\r\n        imagePaths['Condílio (Co)'] = 'condilio.png';\r\n        imagePaths['Pró-nasal (Pn)'] = 'proNasal.png';\r\n        imagePaths['Pogônio Mole (Pg)'] = 'pogonioMole.png';\r\n        imagePaths['Palato Mole (pm)'] = 'palatoMole.png';\r\n        imagePaths['Gônio (Go)'] = '';\r\n        imagePaths['Órbitário (Or)'] = '';\r\n        imagePaths['Pório (Po)'] = '';\r\n        imagePaths['Ponta do Nariz (PtN)'] = '';\r\n        imagePaths['Fossa Ptérigo Maxilar (Fpm)'] = '';\r\n        imagePaths['Pterigóide (Pt)'] = '';\r\n        if (currentLandmark !== 'Selecione' && imagePaths[currentLandmark]) {\r\n            const img = new Image();\r\n            const referenceCanvas = document.getElementById(\r\n                'referenceLandmark'\r\n            ) as HTMLCanvasElement;\r\n            if (referenceCanvas.getContext) {\r\n                const context = referenceCanvas.getContext(\r\n                    '2d'\r\n                ) as CanvasRenderingContext2D;\r\n                img.onload = function () {\r\n                    context.canvas.width = img.width; //maybe don't work\r\n                    context.canvas.height = img.height;\r\n                    const canvasReferenceElement = document.getElementById(\r\n                        'canvas-reference'\r\n                    ) as HTMLCanvasElement;\r\n                    canvasReferenceElement.setAttribute(\r\n                        'style',\r\n                        'height: ' +\r\n                            context.canvas.height +\r\n                            'px' +\r\n                            'width: ' +\r\n                            context.canvas.width +\r\n                            'px'\r\n                    );\r\n                    context.drawImage(\r\n                        img,\r\n                        0,\r\n                        0,\r\n                        context.canvas.width,\r\n                        context.canvas.height\r\n                    ); //draw background image\r\n                    context.fillStyle = 'rgba(1, 1, 1, 0)'; //draw a box over the top\r\n                };\r\n            }\r\n            /*img.src =\r\n                this.urls['referenceImages'] + imagePaths[currentLandmark];*/\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change or set point location on current mouse position\r\n     * @param {IPointBidimensional} point\r\n     */\r\n    markLandmarkPoint(landmarkName: string, point: IPointBidimensional): void {\r\n        if (landmarkName.length > 0 && landmarkName !== 'Selecione') {\r\n            const landmarkCanvas =\r\n                this.canvasOdontoradiosis.getCanvas('landmarks');\r\n            const currentLandmark = this.landmarksController.verifyLandmark(\r\n                landmarkName,\r\n                true\r\n            );\r\n            const currentMousePosition = this.scaleManager.getMousePos(\r\n                landmarkCanvas,\r\n                point\r\n            );\r\n            currentLandmark.x = currentMousePosition.x;\r\n            currentLandmark.y = currentMousePosition.y;\r\n\r\n            this.landmarksController.saveLandmarks();\r\n            this.landmarksController.redrawLandmarks();\r\n        }\r\n    }\r\n}\r\n\r\nexport default MainController;\r\n","import { default as LandmarksController } from '../../controllers/subcontrollers/landmarksController';\r\nimport { default as TracingController } from '../../controllers/subcontrollers/tracingController';\r\nimport {\r\n    IRoutineHelpVar,\r\n    IRoutinesSemiautomatic,\r\n} from '../../util/interfaces/interfaces.js';\r\nimport { IRoutineDescription, ISymbolTable } from './interfaces';\r\n\r\nclass SemiautomaticLandmarks {\r\n    public routinesDescription: IRoutinesSemiautomatic[];\r\n    public tracingController: TracingController;\r\n    public landmarksController: LandmarksController;\r\n    public symbolTable: ISymbolTable;\r\n    public helpVariables: IRoutineHelpVar;\r\n    public preFunctions: { [key: string]: any };\r\n\r\n    /**\r\n     *\r\n     * @param {array} routinesDescription Have all json data informing all routines\r\n     * @param {TracingController} tracingController\r\n     * @param {LandmarksController} landmarksController\r\n     */\r\n    constructor(\r\n        routinesDescription: IRoutineDescription[],\r\n        tracingController: TracingController,\r\n        landmarksController: LandmarksController\r\n    ) {\r\n        this.routinesDescription = routinesDescription;\r\n        this.tracingController = tracingController;\r\n        this.landmarksController = landmarksController;\r\n        const symbolTable: ISymbolTable = {};\r\n        const helpVariables = { accessed_curves: [], landmarkName: '' };\r\n        this.symbolTable = symbolTable;\r\n        this.helpVariables = helpVariables;\r\n        const getParamValue = function (parameter: string): string {\r\n            return symbolTable[parameter] != null\r\n                ? (symbolTable[parameter] as string)\r\n                : parameter;\r\n        };\r\n        this.preFunctions = {\r\n            load_curve: function (\r\n                firstParam: string | undefined,\r\n                secondParam: string | null | undefined,\r\n                resultName: string\r\n            ) {\r\n                const loadedCurves = [tracingController.getCurve(firstParam)];\r\n                if (secondParam != null) {\r\n                    loadedCurves.push(tracingController.getCurve(secondParam));\r\n                    symbolTable[resultName + '_1'] = loadedCurves[0];\r\n                    symbolTable[resultName + '_2'] = loadedCurves[1];\r\n                } else {\r\n                    symbolTable[resultName] = loadedCurves[0];\r\n                }\r\n                return loadedCurves;\r\n            },\r\n            access_point: function (\r\n                firstParam: number,\r\n                secondParam: string | number,\r\n                resultName: string | number\r\n            ) {\r\n                const accessed = { x: 0, y: 0 };\r\n                let counter = 0;\r\n                for (\r\n                    let index = 0;\r\n                    index < (symbolTable[secondParam]?.length ?? 0);\r\n                    index++\r\n                ) {\r\n                    const element =\r\n                        symbolTable[secondParam] != null\r\n                            ? symbolTable[secondParam]![index] ?? ''\r\n                            : '';\r\n                    for (\r\n                        let subindex = 1;\r\n                        subindex < (element?.length ?? 0);\r\n                        subindex += 2\r\n                    ) {\r\n                        counter++;\r\n                        if (counter == firstParam) {\r\n                            accessed.x = element[subindex - 1] as number;\r\n                            accessed.y = element[subindex] as number;\r\n                        }\r\n                    }\r\n                }\r\n                symbolTable[resultName] = accessed;\r\n                return accessed;\r\n            },\r\n            point_to_var: function (\r\n                firstParam: string | number,\r\n                secondParam: any,\r\n                resultName: { [x: string]: string | number }\r\n            ) {\r\n                const toVar = symbolTable[firstParam];\r\n                symbolTable[resultName['x']] = toVar.x;\r\n                symbolTable[resultName['y']] = toVar.y;\r\n            },\r\n            add: function (\r\n                firstParam: string,\r\n                secondParam: string,\r\n                resultName: string | number\r\n            ) {\r\n                const value_1 = getParamValue(firstParam);\r\n                const value_2 = getParamValue(secondParam);\r\n                symbolTable[resultName] = value_1 + value_2;\r\n                return symbolTable[resultName];\r\n            },\r\n            sub: function (\r\n                firstParam: string,\r\n                secondParam: string,\r\n                resultName: string | number\r\n            ) {\r\n                const value_1 = parseFloat(getParamValue(firstParam));\r\n                const value_2 = parseFloat(getParamValue(secondParam));\r\n                symbolTable[resultName] = value_1 - value_2;\r\n                return symbolTable[resultName];\r\n            },\r\n            div: function (\r\n                firstParam: string,\r\n                secondParam: string,\r\n                resultName: string | number\r\n            ) {\r\n                const value_1 = parseFloat(getParamValue(firstParam));\r\n                const value_2 = parseFloat(getParamValue(secondParam));\r\n                symbolTable[resultName] = value_1 / value_2;\r\n                return symbolTable[resultName];\r\n            },\r\n            mul: function (\r\n                firstParam: string,\r\n                secondParam: string,\r\n                resultName: string | number\r\n            ) {\r\n                const value_1 = parseFloat(getParamValue(firstParam));\r\n                const value_2 = parseFloat(getParamValue(secondParam));\r\n                symbolTable[resultName] = value_1 * value_2;\r\n                return symbolTable[resultName];\r\n            },\r\n            mod: function (\r\n                firstParam: string,\r\n                secondParam: string,\r\n                resultName: string | number\r\n            ) {\r\n                const value_1 = parseFloat(getParamValue(firstParam));\r\n                const value_2 = parseFloat(getParamValue(secondParam));\r\n                symbolTable[resultName] = value_1 % value_2;\r\n                return symbolTable[resultName];\r\n            },\r\n            average: function (\r\n                firstParam: string | any[],\r\n                secondParam: any,\r\n                resultName: string | number\r\n            ) {\r\n                let average = 0;\r\n                const total = firstParam.length;\r\n                for (let index = 0; index < firstParam.length; index++) {\r\n                    average += firstParam[index];\r\n                }\r\n                symbolTable[resultName] = average / total;\r\n                return symbolTable[resultName];\r\n            },\r\n            return: function (\r\n                firstParam: string | number,\r\n                secondParam: string | number,\r\n                resultName: any\r\n            ) {\r\n                const result = {\r\n                    x: parseFloat(symbolTable[firstParam] as string),\r\n                    y: parseFloat(symbolTable[secondParam] as string),\r\n                };\r\n                landmarksController.setLandmark(\r\n                    helpVariables.landmarkName,\r\n                    result\r\n                );\r\n                landmarksController.redrawLandmarks();\r\n                return result;\r\n            },\r\n        };\r\n    }\r\n\r\n    generateButtonEvent(): void {\r\n        const self = this;\r\n        const semiautomaticButton = document.getElementById(\r\n            'semiautomatic_button'\r\n        ) as HTMLButtonElement;\r\n        if (semiautomaticButton) {\r\n            semiautomaticButton.onclick = function () {\r\n                self.start.call(self);\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start all routines\r\n     */\r\n    start(): boolean {\r\n        for (let index = 0; index < this.routinesDescription.length; index++) {\r\n            const currentRoutine = this.routinesDescription[index];\r\n            this.helpVariables.landmarkName = currentRoutine.landmark;\r\n            this.helpVariables.accessed_curves = currentRoutine.accessed_curves;\r\n            for (\r\n                let position = 0;\r\n                position < currentRoutine.routines.length;\r\n                position++\r\n            ) {\r\n                const element = currentRoutine.routines[position];\r\n                this.preFunctions[element[0]](\r\n                    element[1],\r\n                    element[2],\r\n                    element[3]\r\n                );\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default SemiautomaticLandmarks;\r\n","import { ICanvasDraw } from '../../domain/util/interfaces/views/canvasDraw';\r\nimport { default as ScaleManager } from '../../domain/util/scaleManager';\r\nimport { default as UsefulMethods } from '../../domain/util/usefulMethods';\r\n\r\nclass CanvasOdontoradiosisImpl implements ICanvasDraw {\r\n    public stackCanvas: HTMLElement;\r\n    public layerSequence: { [key: string]: number };\r\n    public existentCanvas: {\r\n        [key: string]: HTMLCanvasElement;\r\n    };\r\n    public scaleManager: ScaleManager;\r\n\r\n    /**\r\n     * Constructor\r\n     * @param {HTMLElement} stackCanvas\r\n     * @param {ScaleManager} scaleManager\r\n     * @param {array} layerSequence\r\n     */\r\n    constructor(\r\n        stackCanvas: HTMLElement,\r\n        scaleManager: ScaleManager,\r\n        layerSequence: { [key: string]: number } = {}\r\n    ) {\r\n        this.stackCanvas = stackCanvas;\r\n        this.layerSequence = layerSequence;\r\n        this.existentCanvas = {};\r\n        this.scaleManager = scaleManager;\r\n    }\r\n\r\n    public addCanvasElement(\r\n        canvasId: string,\r\n        element: HTMLCanvasElement\r\n    ): void {\r\n        this.existentCanvas[canvasId] = element;\r\n        element.setAttribute(\r\n            'style',\r\n            UsefulMethods.canvasStyle(this.layerSequence[canvasId] ?? -1)\r\n        );\r\n    }\r\n\r\n    get scales(): ScaleManager {\r\n        return this.scaleManager;\r\n    }\r\n\r\n    public set canvasCursor(newCursor: string) {\r\n        this.stackCanvas.style.cursor = newCursor;\r\n    }\r\n\r\n    /**\r\n     * Returns a canvas based on it id\r\n     * @param {string} id\r\n     * @returns {HTMLCanvasElement}\r\n     */\r\n    getCanvas(id: string): HTMLCanvasElement {\r\n        return this.existentCanvas[id];\r\n    }\r\n\r\n    /**\r\n     * Returns a canvas context based on it id\r\n     * @param {string} id\r\n     * @returns {CanvasRenderingContext2D}\r\n     */\r\n    getContext(id: string): CanvasRenderingContext2D {\r\n        return this.existentCanvas[id].getContext(\r\n            '2d'\r\n        ) as CanvasRenderingContext2D;\r\n    }\r\n\r\n    /**\r\n     * Apply a style to the canvas using UsefulMethods\r\n     * @param {string} id\r\n     * @param {string} styleName\r\n     * @param {string} newStyle\r\n     */\r\n    setStyle(id: string, styleName: string, newStyle: string): void {\r\n        this.getCanvas(id).style.setProperty(styleName, newStyle);\r\n    }\r\n\r\n    /**\r\n     * Clear canvas that have the id passed\r\n     * @param {string} canvasId\r\n     */\r\n    clearCanvas(canvasId: string): void {\r\n        const canvas = this.getCanvas(canvasId);\r\n        const context = canvas.getContext('2d');\r\n        if (context) {\r\n            /*context.clearRect(0, 0, canvas.width, canvas.height);*/\r\n            const canvasWidth = context.canvas.width;\r\n            context.canvas.width = canvasWidth;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a circle in selected context with selected colors\r\n     * @param {CanvasRenderingContext2D} context\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} pointRadius\r\n     * @param {number} lineWidth\r\n     * @param {string} fillStyle\r\n     * @param {string} strokeStyle\r\n     */\r\n    drawCircle(\r\n        context: CanvasRenderingContext2D,\r\n        x: number = 0,\r\n        y: number = 0,\r\n        pointRadius: number = this.scaleManager.pointRadius,\r\n        lineWidth: number = this.scaleManager.lineWidth,\r\n        fillStyle: string = '#184bed',\r\n        strokeStyle: string = '#184bed'\r\n    ): void {\r\n        context.beginPath();\r\n        context.arc(x, y, pointRadius, 0, 2 * Math.PI);\r\n        context.fillStyle = fillStyle;\r\n        context.fill();\r\n        context.lineWidth = lineWidth;\r\n        context.strokeStyle = strokeStyle;\r\n        context.stroke();\r\n    }\r\n\r\n    /**\r\n     * Draw a circle in selected curve with selected colors\r\n     * @param {string} layerId\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} pointRadius\r\n     * @param {number} lineWidth\r\n     * @param {string} fillStyle\r\n     * @param {string} strokeStyle\r\n     */\r\n    drawCircleCtx(\r\n        layerId: string,\r\n        x: number = 0,\r\n        y: number = 0,\r\n        pointRadius: number = this.scaleManager.pointRadius,\r\n        lineWidth: number = this.scaleManager.lineWidth,\r\n        fillStyle: string = '#184bed',\r\n        strokeStyle: string = '#184bed'\r\n    ): void {\r\n        this.drawCircle(\r\n            this.getContext(layerId),\r\n            x,\r\n            y,\r\n            pointRadius,\r\n            lineWidth,\r\n            fillStyle,\r\n            strokeStyle\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {CanvasRenderingContext2D} context\r\n     * @param {number} x1\r\n     * @param {number} y1\r\n     * @param {number} cx1\r\n     * @param {number} cy1\r\n     * @param {number} cx2\r\n     * @param {number} cy2\r\n     * @param {number} x2\r\n     * @param {number} y2\r\n     * @param {string} strokeStyle\r\n     */\r\n    drawBezier(\r\n        context: CanvasRenderingContext2D,\r\n        x1: number,\r\n        y1: number,\r\n        cx1: number,\r\n        cy1: number,\r\n        cx2: number,\r\n        cy2: number,\r\n        x2: number,\r\n        y2: number,\r\n        strokeStyle: string\r\n    ): void {\r\n        context.strokeStyle = strokeStyle;\r\n        context.moveTo(x1, y1);\r\n        context.bezierCurveTo(cx1, cy1, cx2, cy2, x2, y2);\r\n        context.lineWidth = this.scaleManager.lineWidth;\r\n        context.stroke();\r\n    }\r\n\r\n    /**\r\n     * Opens a given image and reset canvas size\r\n     * @param {string} imageData\r\n     * @param {VoidFunction} loadFunction\r\n     */\r\n    openImage(imageData: string = '', loadFunction?: VoidFunction): void {\r\n        const imageObject = new Image();\r\n        if (this.existentCanvas['image'].getContext('2d')) {\r\n            const context = this.existentCanvas['image'].getContext(\r\n                '2d'\r\n            ) as CanvasRenderingContext2D;\r\n            const self = this;\r\n            const selfScaleManager = this.scaleManager;\r\n            //OnLoad Image here\r\n            imageObject.onload = function () {\r\n                context.canvas.width = imageObject.width; //this.width\r\n                context.canvas.height = imageObject.height; //this.height\r\n                ['landmarks', 'bezier'].forEach((element) => {\r\n                    const temporaryContext = self.existentCanvas[\r\n                        element\r\n                    ].getContext('2d') as CanvasRenderingContext2D;\r\n                    temporaryContext.canvas.width = context.canvas.width;\r\n                    temporaryContext.canvas.height = context.canvas.height;\r\n                });\r\n                const cardCanvas = document.getElementById('card-canvas');\r\n                if (cardCanvas) {\r\n                    cardCanvas.setAttribute(\r\n                        'style',\r\n                        'height: ' + context.canvas.height + 'px'\r\n                    );\r\n                }\r\n                selfScaleManager.calculateScales.call(\r\n                    selfScaleManager,\r\n                    self.existentCanvas['landmarks']\r\n                );\r\n\r\n                context.drawImage(\r\n                    imageObject,\r\n                    0,\r\n                    0,\r\n                    context.canvas.width,\r\n                    context.canvas.height\r\n                ); //draw background image\r\n                context.fillStyle = 'rgba(1, 1, 1, 0)'; //draw a box over the top\r\n                if (loadFunction) {\r\n                    loadFunction();\r\n                }\r\n            };\r\n        }\r\n        imageObject.src = imageData;\r\n    }\r\n}\r\n\r\nexport default CanvasOdontoradiosisImpl;\r\n","import { Injectable } from '@angular/core';\r\nimport ImageEffects from './domain/controllers/imageEffects';\r\nimport MainController from './domain/controllers/mainController';\r\nimport LandmarksController from './domain/controllers/subcontrollers/landmarksController';\r\nimport TracingController from './domain/controllers/subcontrollers/tracingController';\r\nimport SemiautomaticLandmarks from './domain/features/semiautomatic_landmark/init';\r\nimport aJson from './domain/features/semiautomatic_landmark/routines/a.ldmk.json';\r\nimport enaJson from './domain/features/semiautomatic_landmark/routines/ena.ldmk.json';\r\nimport gnatioJson from './domain/features/semiautomatic_landmark/routines/gnatio.ldmk.json';\r\nimport nasioJson from './domain/features/semiautomatic_landmark/routines/nasio.ldmk.json';\r\nimport selaJson from './domain/features/semiautomatic_landmark/routines/sela.ldmk.json';\r\nimport OdontoradiosisKeeper from './domain/models/odontoradiosisKeeper';\r\nimport { IEffectValues } from './domain/util/interfaces/interfaces';\r\nimport { ICanvasDraw } from './domain/util/interfaces/views/canvasDraw';\r\nimport ScaleManager from './domain/util/scaleManager';\r\nimport CanvasOdontoradiosisImpl from './infra/views/canvasImpl';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CephalometricCanvasService {\r\n    private mainController!: MainController;\r\n    private canvasOdontoradiosis!: ICanvasDraw;\r\n    private imageEffects!: ImageEffects;\r\n    private imageLoaded: boolean;\r\n\r\n    constructor(\r\n        private infoKeeper: OdontoradiosisKeeper,\r\n        private scaleManager: ScaleManager\r\n    ) {\r\n        this.imageLoaded = false;\r\n    }\r\n\r\n    public init(stackCanvas: HTMLElement): void {\r\n        this.canvasOdontoradiosis = new CanvasOdontoradiosisImpl(\r\n            stackCanvas,\r\n            this.scaleManager,\r\n            { image: 0, bezier: 1, landmarks: 2 }\r\n        );\r\n\r\n        this.imageEffects = new ImageEffects(this.canvasOdontoradiosis);\r\n        this.mainController = new MainController(\r\n            this.canvasOdontoradiosis,\r\n            this.scaleManager,\r\n            this.infoKeeper\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adding the semiautomatic landmark indentification feature\r\n     * @param tracingController\r\n     * @param landmarksController\r\n     * @returns\r\n     */\r\n    public static newSemiautomaticLandmark(\r\n        tracingController: TracingController,\r\n        landmarksController: LandmarksController\r\n    ): SemiautomaticLandmarks {\r\n        return new SemiautomaticLandmarks(\r\n            [aJson, enaJson, gnatioJson, nasioJson, selaJson],\r\n            tracingController,\r\n            landmarksController\r\n        );\r\n        // semiautomaticLandmarks.generateButtonEvent();\r\n    }\r\n\r\n    public get effectsManager(): ImageEffects {\r\n        return this.imageEffects;\r\n    }\r\n\r\n    public get defaultEffectValues(): IEffectValues {\r\n        return ImageEffects.defaultValues;\r\n    }\r\n\r\n    public get tracingController(): TracingController {\r\n        return this.mainController.tracingController;\r\n    }\r\n\r\n    public get cephalometricCanvas(): ICanvasDraw {\r\n        return this.mainController.canvasOdontoradiosis;\r\n    }\r\n\r\n    public get controller(): MainController {\r\n        return this.mainController;\r\n    }\r\n\r\n    public get isImageOpened(): boolean {\r\n        return this.imageLoaded;\r\n    }\r\n\r\n    public openImage(imageData: string): void {\r\n        this.mainController.tracingController.setBezierPoints();\r\n        const self = this;\r\n        this.canvasOdontoradiosis.openImage(imageData, function () {\r\n            self.mainController.loadJsonCurve('');\r\n            self.mainController.loadJsonLandmarks('');\r\n            self.imageLoaded = true;\r\n        });\r\n        this.imageEffects.reset();\r\n    }\r\n}\r\n","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { CephalometricCanvasService } from '../../cephalometric-canvas.service';\r\nimport OdontoradiosisKeeper from '../../domain/models/odontoradiosisKeeper';\r\nimport { IPointBidimensional } from '../../domain/util/interfaces/interfaces';\r\nimport ScaleManager from '../../domain/util/scaleManager';\r\nimport UsefulMethods from '../../domain/util/usefulMethods';\r\n\r\n@Component({\r\n    selector: 'lib-cephalometric-canvas',\r\n    templateUrl: './cephalometric-canvas.component.html',\r\n    styleUrls: ['./cephalometric-canvas.component.scss'],\r\n})\r\nexport class CephalometricCanvasComponent implements OnInit {\r\n    @ViewChild('stackCanvas')\r\n    stackCanvasElement!: ElementRef<HTMLElement>;\r\n\r\n    @ViewChild('canvasImage')\r\n    canvasImageElement!: ElementRef<HTMLCanvasElement>;\r\n\r\n    @ViewChild('canvasBezier')\r\n    canvasBezierElement!: ElementRef<HTMLCanvasElement>;\r\n\r\n    @ViewChild('canvasLandmarks')\r\n    canvasLandmarksElement!: ElementRef<HTMLCanvasElement>;\r\n\r\n    constructor(\r\n        private canvasService: CephalometricCanvasService,\r\n        private infoKeeper: OdontoradiosisKeeper,\r\n        private scaleManager: ScaleManager\r\n    ) {}\r\n\r\n    ngOnInit(): void {}\r\n\r\n    ngAfterViewInit(): void {\r\n        this.canvasService.init(this.stackCanvasElement.nativeElement);\r\n        this.canvasService.cephalometricCanvas.addCanvasElement(\r\n            'image',\r\n            this.canvasImageElement.nativeElement\r\n        );\r\n        this.canvasService.cephalometricCanvas.addCanvasElement(\r\n            'bezier',\r\n            this.canvasBezierElement.nativeElement\r\n        );\r\n        this.canvasService.cephalometricCanvas.addCanvasElement(\r\n            'landmarks',\r\n            this.canvasLandmarksElement.nativeElement\r\n        );\r\n    }\r\n\r\n    onMouseMove(event: PointerEvent): void {\r\n        event.preventDefault();\r\n        event.stopPropagation(); // tell the browser we're handling this event\r\n\r\n        const canvasController = this.canvasService.cephalometricCanvas;\r\n        const tracingController = this.canvasService.tracingController;\r\n\r\n        const bezierCanvas = canvasController.getCanvas('bezier');\r\n        const context = canvasController.getContext('bezier');\r\n        context.translate(bezierCanvas.width / 2, bezierCanvas.height / 2);\r\n\r\n        if (this.infoKeeper.isMouseDown && this.infoKeeper.isCurveFunction) {\r\n            /* do drag things */\r\n            canvasController.canvasCursor = 'move';\r\n\r\n            const curveName = UsefulMethods.normalizeTracingName(\r\n                this.infoKeeper.selectedOptions.curve\r\n            );\r\n            const referenceCanvas = canvasController.getCanvas('landmarks');\r\n            const referenceContext = canvasController.getContext('landmarks');\r\n            const referenceRect = referenceCanvas.getBoundingClientRect();\r\n\r\n            const currentPosition: IPointBidimensional = {\r\n                x: this.scaleManager.dynamicCanvasScale(\r\n                    event.clientX,\r\n                    true,\r\n                    referenceContext,\r\n                    referenceRect\r\n                ),\r\n                y: this.scaleManager.dynamicCanvasScale(\r\n                    event.clientY,\r\n                    false,\r\n                    referenceContext,\r\n                    referenceRect\r\n                ),\r\n            };\r\n\r\n            if (this.infoKeeper.mousePosition.disabled) {\r\n                this.infoKeeper.mousePosition.x = currentPosition.x;\r\n                this.infoKeeper.mousePosition.y = currentPosition.y;\r\n                this.infoKeeper.mousePosition.disabled = false;\r\n            } else {\r\n                const boxVertexInfo = this.infoKeeper.isOnBoxVertex;\r\n                if (boxVertexInfo.isOn) {\r\n                    /*still need to fix problem when rescale with top points*/\r\n                    let scaleX =\r\n                        currentPosition.x / this.infoKeeper.mousePosition.x;\r\n                    if (boxVertexInfo.index < 2) {\r\n                        scaleX =\r\n                            this.infoKeeper.mousePosition.x / currentPosition.x;\r\n                    }\r\n                    let scaleY =\r\n                        currentPosition.y / this.infoKeeper.mousePosition.y;\r\n                    if (boxVertexInfo.index % 2 === 0) {\r\n                        scaleY =\r\n                            this.infoKeeper.mousePosition.y / currentPosition.y;\r\n                    }\r\n                    tracingController.rescaleBezier(curveName, scaleX, scaleY);\r\n                } else if (this.infoKeeper.isOnCurvePoints != null) {\r\n                    const curvePoints = this.infoKeeper\r\n                        .isOnCurvePoints[0] as number[];\r\n                    curvePoints[this.infoKeeper.isOnCurvePoints[1] as number] -=\r\n                        this.infoKeeper.mousePosition.x - currentPosition.x;\r\n                    curvePoints[this.infoKeeper.isOnCurvePoints[2] as number] -=\r\n                        this.infoKeeper.mousePosition.y - currentPosition.y;\r\n                } else if (this.infoKeeper.isInsideBox) {\r\n                    tracingController.translateBezier(\r\n                        curveName,\r\n                        this.infoKeeper.mousePosition.x - currentPosition.x,\r\n                        this.infoKeeper.mousePosition.y - currentPosition.y\r\n                    );\r\n                } else {\r\n                    let angle = UsefulMethods.calculateAngle(\r\n                        currentPosition,\r\n                        this.infoKeeper.mousePosition\r\n                    );\r\n                    if (!isNaN(angle)) {\r\n                        angle *= UsefulMethods.highLowAngle(\r\n                            this.infoKeeper.mousePosition,\r\n                            {\r\n                                x: currentPosition.x,\r\n                                y: currentPosition.y,\r\n                            }\r\n                        );\r\n                        tracingController.rotateBezier(curveName, angle);\r\n                    }\r\n                }\r\n                this.infoKeeper.mousePosition.x = currentPosition.x;\r\n                this.infoKeeper.mousePosition.y = currentPosition.y;\r\n                this.infoKeeper.mousePosition.disabled = false;\r\n                tracingController.drawAllCurves();\r\n                tracingController.drawCurveBox(curveName, true);\r\n                tracingController.drawPointCircle(curveName);\r\n                tracingController.saveBezierCurve();\r\n            }\r\n        } else if (this.infoKeeper.isCurveFunction) {\r\n            canvasController.canvasCursor = 'crosshair';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receive a event and manage when to select curve or landmark functions\r\n     * @param event\r\n     */\r\n    onMouseDown(event: PointerEvent): void {\r\n        this.infoKeeper.isMouseDown = true;\r\n\r\n        // Start handling the mouse position\r\n        const currentCurve = this.infoKeeper.selectedOptions.curve;\r\n        const curveName = UsefulMethods.normalizeTracingName(currentCurve);\r\n        const tracingController = this.canvasService.tracingController;\r\n        const canvasOdontoradiosis = this.canvasService.cephalometricCanvas;\r\n        if (currentCurve.length <= 0 || currentCurve === 'Selecione') {\r\n            this.infoKeeper.isCurveFunction = false;\r\n            const landmarkName = this.infoKeeper.selectedOptions.landmark;\r\n            this.canvasService.controller.markLandmarkPoint(landmarkName, {\r\n                x: event.clientX,\r\n                y: event.clientY,\r\n            });\r\n        } else if (tracingController.curveExists(curveName)) {\r\n            this.infoKeeper.isCurveFunction = true;\r\n            const points = tracingController.getBoxDimensions(curveName);\r\n            const relativeMouse = this.scaleManager.getMousePos(\r\n                canvasOdontoradiosis.getCanvas('bezier'),\r\n                { x: event.clientX, y: event.clientY }\r\n            );\r\n            this.infoKeeper.isInsideBox =\r\n                relativeMouse.x >= points[0] &&\r\n                relativeMouse.x <= points[0] + points[2] &&\r\n                relativeMouse.y >= points[1] &&\r\n                relativeMouse.y <= points[1] + points[3];\r\n            this.infoKeeper.isOnBoxVertex =\r\n                tracingController.verifyMouseOnBoxVertex(\r\n                    relativeMouse,\r\n                    curveName\r\n                );\r\n            this.infoKeeper.isOnCurvePoints =\r\n                tracingController.verifyMouseOnCurvePoint(\r\n                    relativeMouse,\r\n                    curveName\r\n                );\r\n        }\r\n    }\r\n\r\n    onMouseUp(): void {\r\n        this.infoKeeper.isMouseDown = false;\r\n        this.infoKeeper.isInsideBox = false;\r\n        this.infoKeeper.isOnBoxVertex = { isOn: false, index: 0 };\r\n        this.infoKeeper.isOnCurvePoints = null;\r\n\r\n        /*this.infoKeeper.mousePosition.x = null;\r\n        this.infoKeeper.mousePosition.y = null;*/\r\n        this.infoKeeper.mousePosition.disabled = true;\r\n    }\r\n}\r\n","<div id=\"card-canvas\" class=\"card-body\">\r\n  <div\r\n    (pointerdown)=\"onMouseDown($event)\"\r\n    (pointerup)=\"onMouseUp()\"\r\n    (pointermove)=\"onMouseMove($event)\"\r\n    #stackCanvas\r\n    id=\"stack-canvas\"\r\n  >\r\n    <canvas #canvasImage id=\"image\"> </canvas>\r\n    <canvas #canvasBezier id=\"bezier\"> </canvas>\r\n    <canvas #canvasLandmarks id=\"landmarks\"> </canvas>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { CephalometricCanvasComponent } from './components/cephalometric-canvas/cephalometric-canvas.component';\r\n\r\n@NgModule({\r\n    declarations: [CephalometricCanvasComponent],\r\n    imports: [],\r\n    exports: [CephalometricCanvasComponent],\r\n})\r\nexport class CephalometricCanvasModule {}\r\n","/*\r\n * Public API Surface of cephalometric-canvas\r\n */\r\n\r\nexport * from './lib/cephalometric-canvas.module';\r\nexport * from './lib/cephalometric-canvas.service';\r\nexport * from './lib/components/cephalometric-canvas/cephalometric-canvas.component';\r\nexport { default as OdontoradiosisKeeper } from './lib/domain/models/odontoradiosisKeeper';\r\nexport { default as ScaleManager } from './lib/domain/util/scaleManager';\r\nexport { default as UsefulMethods } from './lib/domain/util/usefulMethods';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}